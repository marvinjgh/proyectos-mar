package interfaz;

import control.FileManager;
import funciones.Imagen;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DecimalFormat;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */

/*
 * Interfaz.java
 *
 * Created on Apr 6, 2012, 11:01:28 AM
 */
/**
 *
 * @author Marvin
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        fm = new FileManager();
        img = null;
        escale = false;
        rotate = false;
        pintar_hist(Color.white);
        dialogo_promedio = new Dialogo_promedio(this, true);
        dialogo_mediana = new Dialogo_promedio(this, true);
        dialogo_log = new Dialogo_log(this, true);
        dialogo_elem_struc = new Dialogo_elem_struc(this, true);
        dialogo_matriz_generic = new Dialogo_matriz_generic(this, true);
        matrix2 = dialogo_elem_struc.getElemento();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Group_rotar = new javax.swing.ButtonGroup();
        Group_color = new javax.swing.ButtonGroup();
        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBoxRotar = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldRotar = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldAncho = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldAlto = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jSliderEscalar = new javax.swing.JSlider();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jComboBoxCuantizar = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelPeso = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabelDimensiones = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabelbpp = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        item_promedio = new javax.swing.JMenuItem();
        item_mediana = new javax.swing.JMenuItem();
        item_log = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        item_prewitt = new javax.swing.JMenuItem();
        item_prewitt_c = new javax.swing.JMenuItem();
        item_sobel = new javax.swing.JMenuItem();
        item_sobel_c = new javax.swing.JMenuItem();
        item_roberts = new javax.swing.JMenuItem();
        item_roberts_c = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        item_dilatacion = new javax.swing.JMenuItem();
        item_erosion = new javax.swing.JMenuItem();
        item_apertura = new javax.swing.JMenuItem();
        item_cierre = new javax.swing.JMenuItem();
        item_elem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        item_tophat = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        item_matrix = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setAutoscrolls(true);
        jScrollPane1.setViewportView(jLabel1);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 600));

        jButton1.setText("Escala de grises");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ecualizar");

        jComboBoxRotar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-180", "-90", "-45", "45", "90", "180" }));

        jLabel5.setText("Rotar:");

        jLabel7.setText("º");

        jTextFieldRotar.setText("---");
        jTextFieldRotar.setEnabled(false);

        jLabel8.setText("Escalar:");

        jLabel9.setText("Ancho:");

        jTextFieldAncho.setText("100");

        jLabel10.setText("Alto:");

        jTextFieldAlto.setText("100");

        jLabel11.setText("px");

        jLabel12.setText("px");

        jSliderEscalar.setMaximum(1000);
        jSliderEscalar.setMinimum(1);
        jSliderEscalar.setValue(100);
        jSliderEscalar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSliderEscalar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderEscalarStateChanged(evt);
            }
        });

        jLabel13.setText("0%");

        jLabel14.setText("1000%");

        jLabel15.setText("Cuantizar:");

        jComboBoxCuantizar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "16", "8" }));

        jButton3.setText("Aceptar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Ver");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Aceptar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        Group_rotar.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Ángulo fijo");
        jRadioButton1.setToolTipText("");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        Group_rotar.add(jRadioButton2);
        jRadioButton2.setText("Ángulo arbritario");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Histograma");

        Group_color.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.setText("Red");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        Group_color.add(jRadioButton4);
        jRadioButton4.setText("Green");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        Group_color.add(jRadioButton5);
        jRadioButton5.setText("Blue");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Binarizar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxCuantizar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jButton5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator4))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4))
                            .addComponent(jRadioButton2))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jRadioButton3)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton4)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton5))
                            .addComponent(jRadioButton1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldAlto, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel8)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldAncho, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel11))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSliderEscalar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(111, 111, 111)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jComboBoxRotar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldRotar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addGap(0, 27, 27))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jComboBoxRotar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton2)
                    .addComponent(jTextFieldRotar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextFieldAncho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextFieldAlto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13)
                    .addComponent(jSliderEscalar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jComboBoxCuantizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jRadioButton1.getAccessibleContext().setAccessibleName("rotar_notable");

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 86, Short.MAX_VALUE)
        );

        jLabel3.setText("Dimensiones:");

        jLabel4.setText("Peso de la imagen:");

        jLabelPeso.setText("xxx");

        jLabel18.setText("KB");

        jLabelDimensiones.setText("Ancho x Alto");

        jLabel17.setText("bpp:");

        jLabelbpp.setText("  ");

        jMenu1.setText("File");

        open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open.setText("Open");
        open.setToolTipText("Open an image file");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jMenu1.add(open);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Save As...");
        save.setToolTipText("Save this image");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Filters");

        item_promedio.setText("Promedio");
        item_promedio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_promedioActionPerformed(evt);
            }
        });
        jMenu2.add(item_promedio);

        item_mediana.setText("Mediana");
        item_mediana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_medianaActionPerformed(evt);
            }
        });
        jMenu2.add(item_mediana);

        item_log.setText("LoG");
        item_log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_logActionPerformed(evt);
            }
        });
        jMenu2.add(item_log);
        jMenu2.add(jSeparator5);

        item_prewitt.setText("Prewitt");
        item_prewitt.setToolTipText("Cálculo de Gradiente con Prewitt");
        item_prewitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_prewittActionPerformed(evt);
            }
        });
        jMenu2.add(item_prewitt);

        item_prewitt_c.setText("Prewitt (color)");
        item_prewitt_c.setToolTipText("Cálculo de Gradiente con Prewitt (color)");
        item_prewitt_c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_prewitt_cActionPerformed(evt);
            }
        });
        jMenu2.add(item_prewitt_c);

        item_sobel.setText("Sobel");
        item_sobel.setToolTipText("Cálculo de Gradiente con Sobel");
        item_sobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_sobelActionPerformed(evt);
            }
        });
        jMenu2.add(item_sobel);

        item_sobel_c.setText("Sobel (color)");
        item_sobel_c.setToolTipText("Cálculo de Gradiente con Sobel (color)");
        item_sobel_c.setActionCommand("Sobel (colo)");
        item_sobel_c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_sobel_cActionPerformed(evt);
            }
        });
        jMenu2.add(item_sobel_c);

        item_roberts.setText("Roberts");
        item_roberts.setToolTipText("Cálculo de Gradiente con Roberts");
        item_roberts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_robertsActionPerformed(evt);
            }
        });
        jMenu2.add(item_roberts);

        item_roberts_c.setText("Roberts (color)");
        item_roberts_c.setToolTipText("Cálculo de Gradiente con Roberts (color)");
        item_roberts_c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_roberts_cActionPerformed(evt);
            }
        });
        jMenu2.add(item_roberts_c);
        jMenu2.add(jSeparator6);

        item_dilatacion.setText("Dilatacion");
        item_dilatacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_dilatacionActionPerformed(evt);
            }
        });
        jMenu2.add(item_dilatacion);

        item_erosion.setText("Erosion");
        item_erosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_erosionActionPerformed(evt);
            }
        });
        jMenu2.add(item_erosion);

        item_apertura.setText("Apertura");
        item_apertura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_aperturaActionPerformed(evt);
            }
        });
        jMenu2.add(item_apertura);

        item_cierre.setText("Cierre");
        item_cierre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_cierreActionPerformed(evt);
            }
        });
        jMenu2.add(item_cierre);

        item_elem.setText("Elemento Estructurante");
        item_elem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_elemActionPerformed(evt);
            }
        });
        jMenu2.add(item_elem);
        jMenu2.add(jSeparator7);

        item_tophat.setText("Top-Hat");
        item_tophat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_tophatActionPerformed(evt);
            }
        });
        jMenu2.add(item_tophat);
        jMenu2.add(jSeparator8);

        item_matrix.setText("Matriz  de convolucion");
        item_matrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_matrixActionPerformed(evt);
            }
        });
        jMenu2.add(item_matrix);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel18)
                        .addGap(81, 81, 81)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelDimensiones)
                        .addGap(93, 93, 93)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelbpp, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabelPeso)
                    .addComponent(jLabel3)
                    .addComponent(jLabel18)
                    .addComponent(jLabelDimensiones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17)
                    .addComponent(jLabelbpp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed

        File file = fm.cargarImagen(this);
        BufferedImage imagenEntrante = null;
        if (file != null) {
            try {
                imagenEntrante = ImageIO.read(file);
            } catch (FileNotFoundException fnfe) {
                JOptionPane.showMessageDialog(this, "Error abriendo el archivo");
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(this, "Error durante la lectura del archivo");
            }
        } else {
            return;
        }

        img = new Imagen(imagenEntrante);


        //Lo siguiente es la impresion de los datos de la imagen
        if (img != null) {
            DecimalFormat formatF = new DecimalFormat("0.000");
            float tam = file.length();
            jLabelPeso.setText(formatF.format(tam / 1024));
            jLabelDimensiones.setText(img.getWidthImagen() + " x " + img.getHeightImagen());
            jTextFieldAncho.setText(String.valueOf(img.getWidthImagen()));
            jTextFieldAlto.setText(String.valueOf(img.getHeightImagen()));
            jSliderEscalar.setValue(100);
            jLabelbpp.setText(String.valueOf(img.getBpp()));

            if (img.getBpp() < 24) {
                //pintar_hist(Color.gray);
                jRadioButton3.setText("Gray");
                jRadioButton4.setEnabled(false);
                jRadioButton5.setEnabled(false);
            } else {
                //pintar_hist(Color.red);
                jRadioButton3.setText("Red");
                jRadioButton4.setEnabled(true);
                jRadioButton5.setEnabled(true);
            }
        }

        //jLabel2.  ageIcon(salida));
        jLabel1.setIcon((new ImageIcon(img.imagenfinal())));
        repaint();
    }//GEN-LAST:event_openActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            img.ConverToGray();
            jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            img.ecualizar();
            jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            escalar();
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jSliderEscalarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderEscalarStateChanged

        if (img != null) {
            int newAlto = (int) ((img.getHeightImagen() * Float.valueOf(jSliderEscalar.getValue()) / 100));
            int newAncho = (int) ((img.getWidthImagen() * Float.valueOf(jSliderEscalar.getValue()) / 100));
            jTextFieldAlto.setText(Integer.toString(newAlto));
            jTextFieldAncho.setText(Integer.toString(newAncho));

            escalar();

        }
    }//GEN-LAST:event_jSliderEscalarStateChanged

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // Guardar l aimagen
        //fm.guardarImagen(this);
        if (img != null) {
            fm.guardarImagen(this, img.imagenfinal());
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_saveActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Rotar:
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            double r = 0;
            if (jRadioButton1.isSelected()) {
                r = Math.toRadians(Double.parseDouble((String) jComboBoxRotar.getItemAt(jComboBoxRotar.getSelectedIndex())));
            } else {
                try {
                    r = Double.parseDouble(jTextFieldRotar.getText());
                    r = Math.toRadians(r % 360.0);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Valor o formato incorrecto, intente otra vez");
                }
            }
            rotar(r);
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int sel = Integer.parseInt((String) jComboBoxCuantizar.getItemAt(jComboBoxCuantizar.getSelectedIndex()));
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            img.converTo8bo16b(sel);
            jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        jTextFieldRotar.setEnabled(false);
        jComboBoxRotar.setEnabled(true);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        jTextFieldRotar.setEnabled(true);
        jComboBoxRotar.setEnabled(false);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        if (img != null && img.getBpp() < 24) {
            pintar_hist(Color.gray);
        } else {
            pintar_hist(Color.red);
        }
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        if (img != null && img.getBpp() >= 24) {
            pintar_hist(Color.green);
        }
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        if (img != null && img.getBpp() >= 24) {
            pintar_hist(Color.blue);
        }
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void item_prewittActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_prewittActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            img.prewitt_sobel(1);
            jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_prewittActionPerformed

    private void item_sobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_sobelActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            img.prewitt_sobel(2);
            jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_sobelActionPerformed

    private void item_prewitt_cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_prewitt_cActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            img.prewitt_sobel_color(1);
            jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_prewitt_cActionPerformed

    private void item_sobel_cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_sobel_cActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            img.prewitt_sobel_color(2);
            jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_sobel_cActionPerformed

    private void item_robertsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_robertsActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            img.roberts();
            jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_robertsActionPerformed

    private void item_roberts_cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_roberts_cActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            img.roberts_color();
            jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_roberts_cActionPerformed

    private void item_medianaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_medianaActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            int t = 0;
            dialogo_mediana.setVisible(true);
            if (dialogo_mediana.getReturnStatus()) {
                switch (dialogo_mediana.matrix_select) {
                    case M3:
                        matrix = new double[3][3];
                        t = 3;
                        break;
                    case M5:
                        matrix = new double[5][5];
                        t = 5;
                        break;
                    case M7:
                        matrix = new double[7][7];
                        t = 7;
                        break;
                }
                img.mediana(t);
                jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_medianaActionPerformed

    private void item_promedioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_promedioActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            int t = 0;
            dialogo_promedio.setVisible(true);
            if (dialogo_promedio.getReturnStatus()) {
                switch (dialogo_promedio.matrix_select) {
                    case M3:
                        matrix = new double[3][3];
                        t = 3;
                        for (int i = 0; i < 3; i++) {
                            matrix[i][0] = 1;
                            matrix[i][1] = 1;
                            matrix[i][2] = 1;
                        }
                        break;
                    case M5:
                        matrix = new double[5][5];
                        t = 5;
                        for (int i = 0; i < 5; i++) {
                            matrix[i][0] = 1;
                            matrix[i][1] = 1;
                            matrix[i][2] = 1;
                            matrix[i][3] = 1;
                            matrix[i][4] = 1;
                        }
                        break;
                    case M7:
                        matrix = new double[7][7];
                        t = 7;
                        for (int i = 0; i < 7; i++) {
                            matrix[i][0] = 1;
                            matrix[i][1] = 1;
                            matrix[i][2] = 1;
                            matrix[i][3] = 1;
                            matrix[i][4] = 1;
                            matrix[i][5] = 1;
                            matrix[i][6] = 1;
                        }
                        break;
                }
                img.operarMatriz(matrix, t, (double) t * t);
                jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_promedioActionPerformed

    private void item_logActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_logActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }

            dialogo_log.setVisible(true);
            if (dialogo_log.getReturnStatus()) {
                switch (dialogo_log.matrix_select) {
                    case M3:
                        double[][] m1 = {
                            {1.d, 2.d, 1.d},
                            {2.d, 4.d, 2.d},
                            {1.d, 2.d, 1.d}
                        };
                        img.operarMatriz(m1, 3, 16.d);
                        break;
                    case M5:
                        double[][] m2 = {
                            {1.d, 4.d, 6.d, 4.d, 1.d},
                            {4.d, 16.d, 24.d, 16.d, 4.d},
                            {6.d, 24.d, 36.d, 24.d, 6.d},
                            {4.d, 16.d, 24.d, 16.d, 4.d},
                            {1.d, 4.d, 6.d, 4.d, 1.d}
                        };
                        img.operarMatriz(m2, 5, 256.d);
                        break;
                    case M7:
                        double[][] m3 = {
                            {1.d, 6.d, 15.d, 20.d, 15.d, 6.d, 1.d},
                            {6.d, 36.d, 90.d, 120.d, 90.d, 36.d, 6.d},
                            {15.d, 90.d, 225.d, 300.d, 225.d, 90.d, 15.d},
                            {20.d, 120.d, 300.d, 400.d, 300.d, 120.d, 20.d},
                            {15.d, 90.d, 225.d, 300.d, 225.d, 90.d, 15.d},
                            {6.d, 36.d, 90.d, 120.d, 90.d, 36.d, 6.d},
                            {1.d, 6.d, 15.d, 20.d, 15.d, 6.d, 1.d}
                        };
                        img.operarMatriz(m3, 7, 4096.d);
                        break;
                }
                img.operarMatriz(dialogo_log.getLaplaciano(), 3, 1.d);
                jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_logActionPerformed

    private void item_matrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_matrixActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            dialogo_matriz_generic.setVisible(true);
            if (dialogo_matriz_generic.getReturnStatus()) {
                int s = dialogo_matriz_generic.getSeleccion();
                double[][] matriz = dialogo_matriz_generic.getMmatriz();
                double divisor = dialogo_matriz_generic.getDivisor();
                if (matriz != null && divisor > 0) {
                    img.operarMatriz(matriz, s, divisor);
                    jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_matrixActionPerformed

    private void item_dilatacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_dilatacionActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            if (matrix2 != null) {
                img.elemEstrucDilat(matrix2, 3, false);
                jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_dilatacionActionPerformed

    private void item_erosionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_erosionActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            if (matrix2 != null) {
                img.elemEstrucEros(matrix2, 3, false);
                jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_erosionActionPerformed

    private void item_aperturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_aperturaActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            if (matrix2 != null) {
                img.elemEstrucEros(matrix2, 3, true);
                img.apertura(matrix2, 3, false);
                jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_aperturaActionPerformed

    private void item_cierreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_cierreActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            if (matrix2 != null) {
                img.elemEstrucDilat(matrix2, 3, true);
                img.cierre(matrix2, 3);
                jLabel1.setIcon(new ImageIcon(img.imagenfinal()));

            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_cierreActionPerformed

    private void item_tophatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_tophatActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            if (matrix2 != null) {
//                  img.elemEstrucEros(matrix2, 3, true);
//                  img.apertura(matrix2, 3, true);
                img.elemEstrucEros(matrix2, 3, true);
                img.apertura(matrix2, 3, true);
                img.topHat();
                jLabel1.setIcon(new ImageIcon(img.imagenfinal()));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_item_tophatActionPerformed

    private void item_elemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_elemActionPerformed
        dialogo_elem_struc.setVisible(true);
        if (dialogo_elem_struc.getReturnStatus()) {
            matrix2 = dialogo_elem_struc.getElemento();
        }
    }//GEN-LAST:event_item_elemActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (img != null) {
            if (escale) {
                img = new Imagen(imgEscale);
                escale = false;
            }
            if (rotate) {
                img = new Imagen(imgRotada);
                rotate = false;
            }
            img.binarizar();
            jLabel1.setIcon(new ImageIcon(img.imagenfinal()));


        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen");
        }
    }//GEN-LAST:event_jButton6ActionPerformed
    private void pintar_hist(Color c) {
        Dimension d = jPanel3.getSize();

        histograma = jPanel3.getGraphics();
        histograma.setColor(Color.WHITE);
        histograma.fillRect(0, 0, d.width - 1, d.height - 1);
        histograma.setColor(Color.BLACK);
        histograma.drawRect(0, 0, d.width - 1, d.height - 1);
        //vertical
        histograma.drawLine(40, 9, 40, 77);
        histograma.drawLine(41, 9, 41, 77);

        //horizontal
        histograma.drawLine(34, 70, 300, 70);
        histograma.drawLine(34, 71, 300, 71);

        long maxv = 0;
        long array[] = null;
        double dis;
        if (img != null) {
            if (c == Color.red || c == Color.gray) {
                array = img.hred;
            } else if (c == Color.green) {
                array = img.hgreen;
            } else if (c == Color.blue) {
                array = img.hblue;
            }

            for (int i = 0; i < 256; i++) {
                if (maxv < array[i]) {
                    maxv = array[i];
                }
            }
            histograma.setColor(c);

            for (int i = 0; i < 256; i++) {
                dis = (array[i] * 60) / (double) maxv;
                histograma.drawLine(42 + i, 69, 42 + i, 69 - (int) dis);
            }

        }
        histograma.setColor(Color.BLACK);
        histograma.drawRect(0, 0, d.width - 1, d.height - 1);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    //******************************
    //**
    public void escalar() {

        double fancho;   //width 
        double falto;    //height

        int ancho = img.getWidthImagen();
        int alto = img.getHeightImagen();
        int newAncho = Integer.parseInt(jTextFieldAncho.getText());
        int newAlto = Integer.parseInt(jTextFieldAlto.getText());

        fancho = (float) ancho / newAncho;
        falto = (float) alto / newAlto;

        //BufferedImage imgEscale = new BufferedImage(newAlto, newAncho, BufferedImage.TYPE_INT_RGB);
        //Imagen imgEsc = new Imagen(imgEscale);
        //primero creamos un nuevo buffer/raster que tendr'a los datos de la imagen ya con el nuevo tama;o
        //luego creamos un nuevo objeto imagen, en donde le pasaremos ese buffer ya preparado
        //se dibuja y listo...
        //el proceso lala es el de crear el buffer con los nuevos datos de pixeles. 

        imgEscale = new BufferedImage(newAncho, newAlto, img.getTypeImagen());
        //creamos la nueva imagen escalada
        WritableRaster rasterImagenEscalada = imgEscale.getRaster();

        float auxr = 0;
        float auxg = 0;
        float auxb = 0;
        int newi;
        int newj;
//        Arrays.fill(red, 0);
//        Arrays.fill(green, 0);
//        Arrays.fill(blue, 0);

        for (int i = 0; i < newAncho; i++) {
            for (int j = 0; j < newAlto; j++) {
                newi = (int) (i * fancho);
                newj = (int) (j * falto);

                rasterImagenEscalada.setSample(i, j, 0, img.red[newi][newj]);
                
                if(img.getBpp() > 8){
                rasterImagenEscalada.setSample(i, j, 1, img.green[newi][newj]);
                rasterImagenEscalada.setSample(i, j, 2, img.blue[newi][newj]);
                }

            }
        }
        escale = true;
        jLabel1.setIcon(new ImageIcon(imgEscale));
    }

    //******************************
    //**
    public void rotar(double angulo) {


        int ancho = img.getWidthImagen();
        int alto = img.getHeightImagen();

        int mitadx = (int) ancho >> 1;
        int mitady = (int) alto >> 1;

        System.out.println(Math.sin(45 * Math.PI / 180));
        double coseno, seno, nx, ny;
        double minx = 0, miny = 0, maxx = 0, maxy = 0;

        coseno = Math.cos(-angulo);
        seno = Math.sin(-angulo);

        //nx = coseno * (0 - mitadx) + -seno * (0 - mitady) + mitadx;
        //ny = seno * (0 - mitadx) + coseno * (0 - mitady) + mitady;
        nx = coseno * (0) + -seno * (0);
        ny = seno * (0) + coseno * (0);
        miny = Math.min(miny, ny);
        maxy = Math.max(maxy, ny);
        minx = Math.min(minx, nx);
        maxx = Math.max(maxx, nx);
        System.out.println("x = " + nx);
        System.out.println("y = " + ny);

        //nx = coseno * (ancho - mitadx) + -seno * (0 - mitady) + mitadx;
        //ny = seno * (ancho - mitadx) + coseno * (0 - mitady) + mitady;
        nx = coseno * (ancho) + -seno * (0);
        ny = seno * (ancho) + coseno * (0);
        miny = Math.min(miny, ny);
        maxy = Math.max(maxy, ny);
        minx = Math.min(minx, nx);
        maxx = Math.max(maxx, nx);
        System.out.println("x = " + nx);
        System.out.println("y = " + ny);

        //nx = coseno * (0 - mitadx) + -seno * (alto - mitady) + mitadx;
        //ny = seno * (0 - mitadx) + coseno * (alto - mitady) + mitady;
        nx = coseno * (0) + -seno * (alto);
        ny = seno * (0) + coseno * (alto);
        miny = Math.min(miny, ny);
        maxy = Math.max(maxy, ny);
        minx = Math.min(minx, nx);
        maxx = Math.max(maxx, nx);
        System.out.println("x = " + nx);
        System.out.println("y = " + ny);

        //nx = coseno * (ancho - mitadx) + -seno * (alto - mitady) + mitadx;
        //ny = seno * (ancho - mitadx) + coseno * (alto - mitady) + mitady;
        nx = coseno * (ancho) + -seno * (alto);
        ny = seno * (ancho) + coseno * (alto);
        miny = Math.min(miny, ny);
        maxy = Math.max(maxy, ny);
        minx = Math.min(minx, nx);
        maxx = Math.max(maxx, nx);
        System.out.println("x = " + nx);
        System.out.println("y = " + ny);

        int NewAncho = (int) (maxx - minx);
        int NewAlto = (int) (maxy - miny);

        System.out.println("ALTO = " + NewAlto);
        System.out.println("ANCHO = " + NewAncho);


        BufferedImage imgRotada = new BufferedImage(NewAncho, NewAlto, BufferedImage.TYPE_4BYTE_ABGR);
        //creamos la nueva imagen rotada
        WritableRaster rasterImagenRotada = imgRotada.getRaster();

        float auxr;
        float auxg;
        float auxb;
        short[][] red = new short[NewAlto][NewAncho];
        short[][] green = new short[NewAlto][NewAncho];
        short[][] blue = new short[NewAlto][NewAncho];
        short[][] alpha = new short[NewAlto][NewAncho];

        coseno = Math.cos(-angulo);
        seno = Math.sin(-angulo);

        int xc = (int) (maxx + minx - 1) >> 1;
        int yc = (int) (maxy + miny - 1) >> 1;

        //System.out.println("ACA xc " + ((int)(maxx - minx)>>1));
        //System.out.println("ACA yc " + ((int)(maxy - miny)>>1));

        int distancia = (int) Math.sqrt(xc * xc + yc * yc);

        for (int i = 0; i < NewAncho; i++) {
            for (int j = 0; j < NewAlto; j++) {
//                nx = xc + (coseno * (i - xc) - seno * (j - yc)) ;
//                ny = yc + (seno * (i - xc) + coseno * (j - yc)) + 2*miny;
                nx = distancia / 4 + (coseno * (i - distancia) - seno * (j - distancia));
                ny = distancia / 4 + (seno * (i - distancia) + coseno * (j - distancia));

                //System.out.println(i + " + " + j + " + " + nx + " + " + ny + " + "+minx + "+" + miny + "+" + maxx + "+" + maxy);

                if (nx < 0 || nx > ancho || ny < 0 || ny > alto) {
                    rasterImagenRotada.setSample(i, j, 0, 0);
                    rasterImagenRotada.setSample(i, j, 1, 0);
                    rasterImagenRotada.setSample(i, j, 2, 0);
                    rasterImagenRotada.setSample(i, j, 3, 255);
                } else {
                    rasterImagenRotada.setSample(i, j, 0, img.red[(int) nx][(int) ny]);
                    rasterImagenRotada.setSample(i, j, 1, img.green[(int) nx][(int) ny]);
                    rasterImagenRotada.setSample(i, j, 2, img.blue[(int) nx][(int) ny]);
                    rasterImagenRotada.setSample(i, j, 3, 255);
                }//else
                // hred[(int) aux]++; // hgreen[(int) aux]++; // hblue[(int) aux]++;
            }
        }
        //System.out.println(coseno * 0 + -seno * NewAlto / 2);
        rotate = true;
        jLabel1.setIcon(new ImageIcon(imgRotada));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Group_color;
    private javax.swing.ButtonGroup Group_rotar;
    private javax.swing.JMenuItem item_apertura;
    private javax.swing.JMenuItem item_cierre;
    private javax.swing.JMenuItem item_dilatacion;
    private javax.swing.JMenuItem item_elem;
    private javax.swing.JMenuItem item_erosion;
    private javax.swing.JMenuItem item_log;
    private javax.swing.JMenuItem item_matrix;
    private javax.swing.JMenuItem item_mediana;
    private javax.swing.JMenuItem item_prewitt;
    private javax.swing.JMenuItem item_prewitt_c;
    private javax.swing.JMenuItem item_promedio;
    private javax.swing.JMenuItem item_roberts;
    private javax.swing.JMenuItem item_roberts_c;
    private javax.swing.JMenuItem item_sobel;
    private javax.swing.JMenuItem item_sobel_c;
    private javax.swing.JMenuItem item_tophat;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBoxCuantizar;
    private javax.swing.JComboBox jComboBoxRotar;
    private javax.swing.JDialog jDialog1;
    public javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelDimensiones;
    private javax.swing.JLabel jLabelPeso;
    private javax.swing.JLabel jLabelbpp;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JSlider jSliderEscalar;
    private javax.swing.JTextField jTextFieldAlto;
    private javax.swing.JTextField jTextFieldAncho;
    private javax.swing.JTextField jTextFieldRotar;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenuItem save;
    // End of variables declaration//GEN-END:variables
    private FileManager fm;
    private Imagen img;
    private boolean escale;
    private boolean rotate;
    private BufferedImage imgEscale;
    private BufferedImage imgRotada;
    private Graphics histograma;
    private double[][] matrix;
    private double[][] matrix2;
    private Dialogo_promedio dialogo_promedio;
    private Dialogo_promedio dialogo_mediana;
    private Dialogo_log dialogo_log;
    private Dialogo_elem_struc dialogo_elem_struc;
    private Dialogo_matriz_generic dialogo_matriz_generic;
}
